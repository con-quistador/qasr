{
  "language": "Solidity",
  "sources": {
    "contracts/Gateway.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport './IStarknetCore.sol';\n\ncontract Gateway {\n    uint256 public endpointGateway;\n    IStarknetCore public starknetCore;\n    uint256 constant ENDPOINT_GATEWAY_SELECTOR =\n        352040181584456735608515580760888541466059565068553383579463728554843487745;\n\n    constructor(\n        address _endpointGateway,\n        address _starknetCore\n        ) {\n            require(_endpointGateway != address(0), 'Gateway/invalid-endpoint-gateway-address');\n            require(_starknetCore != address(0), 'Gateway/invalid-starknet-core-address');\n\n        endpointGateway = addressToUint(_endpointGateway);\n        starknetCore = IStarknetCore(_starknetCore);\n    }\n\n    function addressToUint(address value) internal pure returns (uint256 convertedValue) {\n        convertedValue = uint256(uint160(address(value)));\n    }\n\n    function warpToStarknet(IERC721 _tokenContract, uint256[] calldata _tokenIds) external {\n        uint256[] memory payload = new uint256[](3);\n        for (uint256 tokenIdx = 0; tokenIdx < _tokenIds.length; ++tokenIdx) {\n            require(_tokenContract.ownerOf(_tokenIds[tokenIdx]) == msg.sender, 'Gateway/caller-is-not-owner');\n            _tokenContract.transferFrom(msg.sender, address(this), _tokenIds[tokenIdx]);\n\n            payload[0] = addressToUint(msg.sender);\n            payload[1] = addressToUint(address(_tokenContract));\n            payload[2] = _tokenIds[tokenIdx];\n\n            starknetCore.sendMessageToL2(endpointGateway, ENDPOINT_GATEWAY_SELECTOR, payload);\n\n        }\n    }\n\n    function warpFromStarknet(IERC721 _tokenContract, uint256[] calldata _tokenIds) external {\n        uint256[] memory payload = new uint256[](3);\n\n        for (uint256 tokenIdx = 0; tokenIdx < _tokenIds.length; ++tokenIdx) {\n            require(_tokenContract.ownerOf(_tokenIds[tokenIdx]) == address(this), 'Gateway/gateway-is-not-owner');\n\n                    payload[0] = addressToUint(msg.sender);\n                    payload[1] = addressToUint(address(_tokenContract));\n                    payload[2] = _tokenIds[tokenIdx];\n\n                    starknetCore.consumeMessageFromL2(endpointGateway, payload);\n\n            _tokenContract.transferFrom(address(this), msg.sender, _tokenIds[tokenIdx]);\n        }\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/IStarknetCore.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IStarknetCore {\n    /**\n      Sends a message to an L2 contract.\n    */\n    function sendMessageToL2(\n        uint256 to_address,\n        uint256 selector,\n        uint256[] calldata payload\n    ) external;\n\n    /**\n      Consumes a message that was sent from an L2 contract.\n    */\n    function consumeMessageFromL2(uint256 fromAddress, uint256[] calldata payload) external;\n}"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}