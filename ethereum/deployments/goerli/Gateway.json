{
  "address": "0xd9cEdF07AfDd92eF2733b919637744D5E166492e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_starknetCore",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_endpointGateway",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1ERC721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "l2ERC721",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BridgeFromStarknet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1ERC721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "l2ERC721",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "l2Account",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BridgeToStarknet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bridgeFromStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bridgeFromStarknetAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_account",
          "type": "uint256"
        }
      ],
      "name": "bridgeToStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "debug_bridgeFromStarknetAvailable",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpointGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starknetCore",
      "outputs": [
        {
          "internalType": "contract IStarknetCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0b2a4d1d9098d4d9d67a0b5ab592573368dd94914d020787d9e5257f8792b8a",
  "receipt": {
    "to": null,
    "from": "0x1290172D02D4AD6902133a31260849fe7Ac89A0C",
    "contractAddress": "0xd9cEdF07AfDd92eF2733b919637744D5E166492e",
    "transactionIndex": 4,
    "gasUsed": "1101543",
    "logsBloom": "0x
    "blockHash": "0xf83ee950a8fd3fcc0648ecf91a029b104aef11bb2982d8c765c6f12d825895f7",
    "transactionHash": "0xd0b2a4d1d9098d4d9d67a0b5ab592573368dd94914d020787d9e5257f8792b8a",
    "logs": [],
    "blockNumber": 5963235,
    "cumulativeGasUsed": "2047483",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xde29d060D45901Fb19ED6C6e959EB22d8626708e",
    "0x045c2f280c6d96a1e1ff740fd38eb6caab833db833ff03a23fbc10fc746025f8"
  ],
  "solcInputHash": "138c066b16561d2841a600ab4a6c29b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starknetCore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endpointGateway\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1ERC721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2ERC721\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeFromStarknet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1ERC721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2ERC721\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2Account\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeToStarknet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeFromStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeFromStarknetAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_account\",\"type\":\"uint256\"}],\"name\":\"bridgeToStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"debug_bridgeFromStarknetAvailable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpointGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IStarknetCore.sol\\\";\\n\\ncontract Gateway {\\n    uint256 public endpointGateway;\\n    IStarknetCore public starknetCore;\\n    uint256 constant ENDPOINT_GATEWAY_SELECTOR =\\n        1738423374452994793145864788013146788518531877200292826651981332061687045062;\\n    uint256 constant BRIDGE_MODE_DEPOSIT = 0;\\n    uint256 constant BRIDGE_MODE_WITHDRAW = 1;\\n\\n    // Bootstrap\\n    constructor(address _starknetCore, uint256 _endpointGateway) {\\n        require(\\n            _starknetCore != address(0),\\n            \\\"Gateway/invalid-starknet-core-address\\\"\\n        );\\n        require(\\n            _endpointGateway != 0,\\n            \\\"Gateway/invalid-starknet-gateway-address\\\"\\n        );\\n\\n        starknetCore = IStarknetCore(_starknetCore);\\n        endpointGateway = _endpointGateway;\\n    }\\n\\n    // Utils\\n    function addressToUint(address value)\\n        internal\\n        pure\\n        returns (uint256 convertedValue)\\n    {\\n        convertedValue = uint256(uint160(address(value)));\\n    }\\n\\n    event BridgeToStarknet(\\n        address indexed l1ERC721,\\n        uint256 indexed l2ERC721,\\n        uint256 indexed l2Account,\\n        uint256 tokenId\\n    );\\n    event BridgeFromStarknet(\\n        address indexed l1ERC721,\\n        uint256 indexed l2ERC721,\\n        address indexed l1Account,\\n        uint256 tokenId\\n    );\\n\\n    // Bridging to Starknet\\n    function bridgeToStarknet(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId,\\n        uint256 _account\\n    ) external {\\n        uint256[] memory payload = new uint256[](4);\\n\\n        // optimistic transfer, should revert if no approved or not owner\\n        _l1TokenContract.transferFrom(msg.sender, address(this), _tokenId);\\n\\n        // build deposit message payload\\n        payload[0] = _account;\\n        payload[1] = addressToUint(address(_l1TokenContract));\\n        payload[2] = _l2TokenContract;\\n        payload[3] = _tokenId;\\n\\n        // send message\\n        starknetCore.sendMessageToL2(\\n            endpointGateway,\\n            ENDPOINT_GATEWAY_SELECTOR,\\n            payload\\n        );\\n\\n        emit BridgeToStarknet(\\n            address(_l1TokenContract),\\n            _l2TokenContract,\\n            _account,\\n            _tokenId\\n        );\\n    }\\n\\n    function bridgeFromStarknetAvailable(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external view returns (bool) {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = BRIDGE_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\n                endpointGateway,\\n                addressToUint(address(this)),\\n                payload.length,\\n                payload\\n            )\\n        );\\n\\n        return starknetCore.l2ToL1Messages(msgHash) > 0;\\n    }\\n\\n    function debug_bridgeFromStarknetAvailable(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external view returns (bytes32) {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = BRIDGE_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\n                endpointGateway,\\n                addressToUint(address(this)),\\n                payload.length,\\n                payload\\n            )\\n        );\\n\\n        return msgHash;\\n    }\\n\\n    // Bridging back from Starknet\\n    function bridgeFromStarknet(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = BRIDGE_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        // consum withdraw message\\n        starknetCore.consumeMessageFromL2(endpointGateway, payload);\\n\\n        // optimistic transfer, should revert if gateway is not token owner\\n        _l1TokenContract.transferFrom(address(this), msg.sender, _tokenId);\\n\\n        emit BridgeFromStarknet(\\n            address(_l1TokenContract),\\n            _l2TokenContract,\\n            msg.sender,\\n            _tokenId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0efd006ba28f6fb6e0b1c2464361ca8cb045409244900add31a0acd314590d4a\",\"license\":\"MIT\"},\"contracts/IStarknetCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStarknetCore {\\n    /**\\n      Sends a message to an L2 contract.\\n    */\\n    function sendMessageToL2(\\n        uint256 to_address,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external;\\n\\n    /**\\n      Consumes a message that was sent from an L2 contract.\\n    */\\n    function consumeMessageFromL2(\\n        uint256 fromAddress,\\n        uint256[] calldata payload\\n    ) external;\\n\\n    /**\\n      Message registry\\n     */\\n    function l2ToL1Messages(bytes32 msgHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x569bc290ad7398824af0039343d98e4096e51528a58be9860cd603a1255a59e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015873803806200158783398181016040528101906200003791906200016f565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a190620001fe565b60405180910390fd5b6000811415620000f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e89062000220565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600081905550505062000363565b60008151905062000152816200032f565b92915050565b600081519050620001698162000349565b92915050565b600080604083850312156200018357600080fd5b6000620001938582860162000141565b9250506020620001a68582860162000158565b9150509250929050565b6000620001bf60258362000242565b9150620001cc8262000291565b604082019050919050565b6000620001e660288362000242565b9150620001f382620002e0565b604082019050919050565b600060208201905081810360008301526200021981620001b0565b9050919050565b600060208201905081810360008301526200023b81620001d7565b9050919050565b600082825260208201905092915050565b6000620002608262000267565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f476174657761792f696e76616c69642d737461726b6e65742d636f72652d616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761792f696e76616c69642d737461726b6e65742d6761746577617960008201527f2d61646472657373000000000000000000000000000000000000000000000000602082015250565b6200033a8162000253565b81146200034657600080fd5b50565b620003548162000287565b81146200036057600080fd5b50565b61121480620003736000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806339e730ab1461006757806341b3a0a11461008557806366fbae52146100a35780636d54e972146100bf578063880f825b146100db5780638af6bae91461010b575b600080fd5b61006f61013b565b60405161007c9190611036565b60405180910390f35b61008d610161565b60405161009a9190611051565b60405180910390f35b6100bd60048036038101906100b89190610d38565b610167565b005b6100d960048036038101906100d49190610d87565b6104bb565b005b6100f560048036038101906100f09190610d38565b6107cc565b604051610102919061101b565b60405180910390f35b61012560048036038101906101209190610d38565b6109fc565b6040516101329190611000565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6000600567ffffffffffffffff8111156101aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101d85781602001602082028036833780820191505090505b509050600181600081518110610217577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061022c33610cd9565b81600181518110610266577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061027b84610cd9565b816002815181106102b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106102fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508181600481518110610343577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600054836040518363ffffffff1660e01b81526004016103ae92919061106c565b600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161041d93929190610fc9565b600060405180830381600087803b15801561043757600080fd5b505af115801561044b573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f3c79007e2a0060755a5fcb7ba40951f8249cfe7de5359d6f78f902bd64c6b54d856040516104ad9190611051565b60405180910390a450505050565b6000600467ffffffffffffffff8111156104fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561052c5781602001602082028036833780820191505090505b5090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161056c93929190610fc9565b600060405180830381600087803b15801561058657600080fd5b505af115801561059a573d6000803e3d6000fd5b5050505081816000815181106105d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506105ee85610cd9565b81600181518110610628577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050838160028151811061066f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106106b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c56000547f03d7e9aabaee46b2e84062eb3bca33a0c08e1142b329c095d47ec3d6af1adbc6846040518463ffffffff1660e01b81526004016107439392919061109c565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b5050505081848673ffffffffffffffffffffffffffffffffffffffff167f0aca6293f7494f7c541b84fe2129038e04f72d67d9c5d23c45435370dd56bb09866040516107bd9190611051565b60405180910390a45050505050565b600080600567ffffffffffffffff811115610810577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561083e5781602001602082028036833780820191505090505b50905060018160008151811061087d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061089233610cd9565b816001815181106108cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506108e185610cd9565b8160028151811061091b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508381600381518110610962577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816004815181106109a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600080546109c230610cd9565b8351846040516020016109d89493929190610f7f565b60405160208183030381529060405280519060200120905080925050509392505050565b600080600567ffffffffffffffff811115610a40577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a6e5781602001602082028036833780820191505090505b509050600181600081518110610aad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610ac233610cd9565b81600181518110610afc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610b1185610cd9565b81600281518110610b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508381600381518110610b92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508281600481518110610bd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060008054610bf230610cd9565b835184604051602001610c089493929190610f7f565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a46efaf3836040518263ffffffff1660e01b8152600401610c7d919061101b565b60206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190610dea565b11925050509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b600081359050610d08816111b0565b92915050565b600081359050610d1d816111c7565b92915050565b600081519050610d32816111c7565b92915050565b600080600060608486031215610d4d57600080fd5b6000610d5b86828701610cf9565b9350506020610d6c86828701610d0e565b9250506040610d7d86828701610d0e565b9150509250925092565b60008060008060808587031215610d9d57600080fd5b6000610dab87828801610cf9565b9450506020610dbc87828801610d0e565b9350506040610dcd87828801610d0e565b9250506060610dde87828801610d0e565b91505092959194509250565b600060208284031215610dfc57600080fd5b6000610e0a84828501610d23565b91505092915050565b6000610e1f8383610f3b565b60208301905092915050565b6000610e378383610f59565b60208301905092915050565b610e4c8161111e565b82525050565b6000610e5d826110ea565b610e678185611102565b9350610e72836110da565b8060005b83811015610ea3578151610e8a8882610e13565b9750610e95836110f5565b925050600181019050610e76565b5085935050505092915050565b6000610ebb826110ea565b610ec58185611113565b9350610ed0836110da565b8060005b83811015610f01578151610ee88882610e2b565b9750610ef3836110f5565b925050600181019050610ed4565b5085935050505092915050565b610f1781611130565b82525050565b610f268161113c565b82525050565b610f3581611182565b82525050565b610f4481611178565b82525050565b610f5381611178565b82525050565b610f6281611178565b82525050565b610f79610f7482611178565b6111a6565b82525050565b6000610f8b8287610f68565b602082019150610f9b8286610f68565b602082019150610fab8285610f68565b602082019150610fbb8284610eb0565b915081905095945050505050565b6000606082019050610fde6000830186610e43565b610feb6020830185610e43565b610ff86040830184610f4a565b949350505050565b60006020820190506110156000830184610f0e565b92915050565b60006020820190506110306000830184610f1d565b92915050565b600060208201905061104b6000830184610f2c565b92915050565b60006020820190506110666000830184610f4a565b92915050565b60006040820190506110816000830185610f4a565b81810360208301526110938184610e52565b90509392505050565b60006060820190506110b16000830186610f4a565b6110be6020830185610f4a565b81810360408301526110d08184610e52565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600061112982611158565b9050919050565b60008115159050919050565b6000819050919050565b60006111518261111e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061118d82611194565b9050919050565b600061119f82611158565b9050919050565b6000819050919050565b6111b981611146565b81146111c457600080fd5b50565b6111d081611178565b81146111db57600080fd5b5056fea2646970667358221220c4d26b419b347c36a5199a7a8f8152ad6c64b76f9d7bf61ec67a48da1a631f5864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806339e730ab1461006757806341b3a0a11461008557806366fbae52146100a35780636d54e972146100bf578063880f825b146100db5780638af6bae91461010b575b600080fd5b61006f61013b565b60405161007c9190611036565b60405180910390f35b61008d610161565b60405161009a9190611051565b60405180910390f35b6100bd60048036038101906100b89190610d38565b610167565b005b6100d960048036038101906100d49190610d87565b6104bb565b005b6100f560048036038101906100f09190610d38565b6107cc565b604051610102919061101b565b60405180910390f35b61012560048036038101906101209190610d38565b6109fc565b6040516101329190611000565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b6000600567ffffffffffffffff8111156101aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101d85781602001602082028036833780820191505090505b509050600181600081518110610217577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061022c33610cd9565b81600181518110610266577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061027b84610cd9565b816002815181106102b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106102fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508181600481518110610343577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600054836040518363ffffffff1660e01b81526004016103ae92919061106c565b600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161041d93929190610fc9565b600060405180830381600087803b15801561043757600080fd5b505af115801561044b573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f3c79007e2a0060755a5fcb7ba40951f8249cfe7de5359d6f78f902bd64c6b54d856040516104ad9190611051565b60405180910390a450505050565b6000600467ffffffffffffffff8111156104fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561052c5781602001602082028036833780820191505090505b5090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161056c93929190610fc9565b600060405180830381600087803b15801561058657600080fd5b505af115801561059a573d6000803e3d6000fd5b5050505081816000815181106105d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506105ee85610cd9565b81600181518110610628577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050838160028151811061066f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106106b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c56000547f03d7e9aabaee46b2e84062eb3bca33a0c08e1142b329c095d47ec3d6af1adbc6846040518463ffffffff1660e01b81526004016107439392919061109c565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b5050505081848673ffffffffffffffffffffffffffffffffffffffff167f0aca6293f7494f7c541b84fe2129038e04f72d67d9c5d23c45435370dd56bb09866040516107bd9190611051565b60405180910390a45050505050565b600080600567ffffffffffffffff811115610810577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561083e5781602001602082028036833780820191505090505b50905060018160008151811061087d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061089233610cd9565b816001815181106108cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506108e185610cd9565b8160028151811061091b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508381600381518110610962577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816004815181106109a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600080546109c230610cd9565b8351846040516020016109d89493929190610f7f565b60405160208183030381529060405280519060200120905080925050509392505050565b600080600567ffffffffffffffff811115610a40577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a6e5781602001602082028036833780820191505090505b509050600181600081518110610aad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610ac233610cd9565b81600181518110610afc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610b1185610cd9565b81600281518110610b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508381600381518110610b92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508281600481518110610bd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060008054610bf230610cd9565b835184604051602001610c089493929190610f7f565b6040516020818303038152906040528051906020012090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a46efaf3836040518263ffffffff1660e01b8152600401610c7d919061101b565b60206040518083038186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190610dea565b11925050509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b600081359050610d08816111b0565b92915050565b600081359050610d1d816111c7565b92915050565b600081519050610d32816111c7565b92915050565b600080600060608486031215610d4d57600080fd5b6000610d5b86828701610cf9565b9350506020610d6c86828701610d0e565b9250506040610d7d86828701610d0e565b9150509250925092565b60008060008060808587031215610d9d57600080fd5b6000610dab87828801610cf9565b9450506020610dbc87828801610d0e565b9350506040610dcd87828801610d0e565b9250506060610dde87828801610d0e565b91505092959194509250565b600060208284031215610dfc57600080fd5b6000610e0a84828501610d23565b91505092915050565b6000610e1f8383610f3b565b60208301905092915050565b6000610e378383610f59565b60208301905092915050565b610e4c8161111e565b82525050565b6000610e5d826110ea565b610e678185611102565b9350610e72836110da565b8060005b83811015610ea3578151610e8a8882610e13565b9750610e95836110f5565b925050600181019050610e76565b5085935050505092915050565b6000610ebb826110ea565b610ec58185611113565b9350610ed0836110da565b8060005b83811015610f01578151610ee88882610e2b565b9750610ef3836110f5565b925050600181019050610ed4565b5085935050505092915050565b610f1781611130565b82525050565b610f268161113c565b82525050565b610f3581611182565b82525050565b610f4481611178565b82525050565b610f5381611178565b82525050565b610f6281611178565b82525050565b610f79610f7482611178565b6111a6565b82525050565b6000610f8b8287610f68565b602082019150610f9b8286610f68565b602082019150610fab8285610f68565b602082019150610fbb8284610eb0565b915081905095945050505050565b6000606082019050610fde6000830186610e43565b610feb6020830185610e43565b610ff86040830184610f4a565b949350505050565b60006020820190506110156000830184610f0e565b92915050565b60006020820190506110306000830184610f1d565b92915050565b600060208201905061104b6000830184610f2c565b92915050565b60006020820190506110666000830184610f4a565b92915050565b60006040820190506110816000830185610f4a565b81810360208301526110938184610e52565b90509392505050565b60006060820190506110b16000830186610f4a565b6110be6020830185610f4a565b81810360408301526110d08184610e52565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600061112982611158565b9050919050565b60008115159050919050565b6000819050919050565b60006111518261111e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061118d82611194565b9050919050565b600061119f82611158565b9050919050565b6000819050919050565b6111b981611146565b81146111c457600080fd5b50565b6111d081611178565b81146111db57600080fd5b5056fea2646970667358221220c4d26b419b347c36a5199a7a8f8152ad6c64b76f9d7bf61ec67a48da1a631f5864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "endpointGateway",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 136,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "starknetCore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStarknetCore)595"
      }
    ],
    "types": {
      "t_contract(IStarknetCore)595": {
        "encoding": "inplace",
        "label": "contract IStarknetCore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}