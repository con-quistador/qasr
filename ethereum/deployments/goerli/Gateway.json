{
  "address": "0x2F6c417C31f5Df3b86DDC9ECC59c33A0b9343062",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_starknetCore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "endpointGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialEndpointGatewaySetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_endpointGateway",
          "type": "uint256"
        }
      ],
      "name": "setEndpointGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starknetCore",
      "outputs": [
        {
          "internalType": "contract IStarknetCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "warpFromStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_l1TokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2TokenContract",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_account",
          "type": "uint256"
        }
      ],
      "name": "warpToStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c032a28fff42ac2c2ad0ea00cc69bb4184e5184c19bd6c723dd39041331fe47",
  "receipt": {
    "to": null,
    "from": "0x574E032f50e806e490Cf3D1194912B9Cc3f5D37D",
    "contractAddress": "0x2F6c417C31f5Df3b86DDC9ECC59c33A0b9343062",
    "transactionIndex": 0,
    "gasUsed": "812304",
    "logsBloom": "0x
    "blockHash": "0xb3e2479d45df094bc12a2ada9de3af20db71718af8515238e7914211460d3e22",
    "transactionHash": "0x7c032a28fff42ac2c2ad0ea00cc69bb4184e5184c19bd6c723dd39041331fe47",
    "logs": [],
    "blockNumber": 5726299,
    "cumulativeGasUsed": "812304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5e6229F2D4d977d20A50219E521dE6Dd694d45cc"
  ],
  "solcInputHash": "e9f483cbcb3299236c502b27e2ac49f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starknetCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"endpointGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialEndpointGatewaySetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endpointGateway\",\"type\":\"uint256\"}],\"name\":\"setEndpointGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"warpFromStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_l1TokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2TokenContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_account\",\"type\":\"uint256\"}],\"name\":\"warpToStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IStarknetCore.sol\\\";\\n\\ncontract Gateway {\\n\\n    address public initialEndpointGatewaySetter;\\n    uint256 public endpointGateway;\\n    IStarknetCore public starknetCore;\\n    uint256 constant ENDPOINT_GATEWAY_SELECTOR =\\n        1286001399277922380574585728897457191013227870708776353075450682753252956216;\\n    uint256 constant WARP_MODE_DEPOSIT = 0;\\n    uint256 constant WARP_MODE_WITHDRAW = 1;\\n\\n    // Bootstrap\\n    constructor(address _starknetCore) {\\n        require(\\n            _starknetCore != address(0),\\n            \\\"Gateway/invalid-starknet-core-address\\\"\\n        );\\n\\n        starknetCore = IStarknetCore(_starknetCore);\\n        initialEndpointGatewaySetter = msg.sender;\\n    }\\n\\n    function setEndpointGateway(uint256 _endpointGateway) external {\\n        require(\\n            msg.sender == initialEndpointGatewaySetter,\\n            \\\"Gateway/unauthorized\\\"\\n        );\\n        require(endpointGateway == 0, \\\"Gateway/endpoint-gateway-already-set\\\");\\n        endpointGateway = _endpointGateway;\\n    }\\n\\n    // Utils\\n    function addressToUint(address value)\\n        internal\\n        pure\\n        returns (uint256 convertedValue)\\n    {\\n        convertedValue = uint256(uint160(address(value)));\\n    }\\n\\n    // Bridging to Starknet\\n    function warpToStarknet(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId,\\n        uint256 _account\\n    ) external {\\n        uint256[] memory payload = new uint256[](4);\\n\\n        // optimistic transfer, should revert if no approved or not owner\\n        _l1TokenContract.transferFrom(msg.sender, address(this), _tokenId);\\n\\n        // build deposit message payload\\n        payload[0] = _account;\\n        payload[1] = addressToUint(address(_l1TokenContract));\\n        payload[2] = _l2TokenContract;\\n        payload[3] = _tokenId;\\n\\n        // send message\\n        starknetCore.sendMessageToL2(\\n            endpointGateway,\\n            ENDPOINT_GATEWAY_SELECTOR,\\n            payload\\n        );\\n    }\\n\\n    // Bridging back from Starknet\\n    function warpFromStarknet(\\n        IERC721 _l1TokenContract,\\n        uint256 _l2TokenContract,\\n        uint256 _tokenId\\n    ) external {\\n        uint256[] memory payload = new uint256[](5);\\n\\n        // build withdraw message payload\\n        payload[0] = WARP_MODE_WITHDRAW;\\n        payload[1] = addressToUint(msg.sender);\\n        payload[2] = addressToUint(address(_l1TokenContract));\\n        payload[3] = _l2TokenContract;\\n        payload[4] = _tokenId;\\n\\n        // consum withdraw message\\n        starknetCore.consumeMessageFromL2(endpointGateway, payload);\\n\\n        // optimistic transfer, should revert if gateway is not token owner\\n        _l1TokenContract.transferFrom(address(this), msg.sender, _tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x4f6c3777a300707e21c7291ba48a2be03b7b8c807f02e848928114539b4bf349\",\"license\":\"MIT\"},\"contracts/IStarknetCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStarknetCore {\\n    /**\\n      Sends a message to an L2 contract.\\n    */\\n    function sendMessageToL2(\\n        uint256 to_address,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external;\\n\\n    /**\\n      Consumes a message that was sent from an L2 contract.\\n    */\\n    function consumeMessageFromL2(\\n        uint256 fromAddress,\\n        uint256[] calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x08298b951b24ec0ac804cae65960f1f68df8575be7c5686aa60e52c1df71f55c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f5838038062000f58833981810160405281019062000037919062000149565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a1906200019c565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200026c565b600081519050620001438162000252565b92915050565b6000602082840312156200015c57600080fd5b60006200016c8482850162000132565b91505092915050565b600062000184602583620001be565b9150620001918262000203565b604082019050919050565b60006020820190508181036000830152620001b78162000175565b9050919050565b600082825260208201905092915050565b6000620001dc82620001e3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f476174657761792f696e76616c69642d737461726b6e65742d636f72652d616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6200025d81620001cf565b81146200026957600080fd5b50565b610cdc806200027c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806339e730ab1461006757806341b3a0a11461008557806346dd48d8146100a35780638d0196d7146100bf578063aa5afdc4146100db578063c5cf2d5e146100f7575b600080fd5b61006f610115565b60405161007c9190610a60565b60405180910390f35b61008d61013b565b60405161009a9190610abb565b60405180910390f35b6100bd60048036038101906100b8919061083b565b610141565b005b6100d960048036038101906100d4919061088a565b61042f565b005b6100f560048036038101906100f091906108ed565b6106f0565b005b6100ff6107cd565b60405161010c9190610a0e565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6000600567ffffffffffffffff811115610184577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101b25781602001602082028036833780820191505090505b5090506001816000815181106101f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610206336107f1565b81600181518110610240577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610255846107f1565b8160028151811061028f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106102d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050818160048151811061031d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600154836040518363ffffffff1660e01b8152600401610388929190610ad6565b600060405180830381600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016103f793929190610a29565b600060405180830381600087803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b5050505050505050565b6000600467ffffffffffffffff811115610472577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104a05781602001602082028036833780820191505090505b5090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016104e093929190610a29565b600060405180830381600087803b1580156104fa57600080fd5b505af115801561050e573d6000803e3d6000fd5b50505050818160008151811061054d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610562856107f1565b8160018151811061059c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505083816002815181106105e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050828160038151811061062a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c56001547f02d7d9dafffc43b7e5c89c5702e7775c5de077ae4bec73d6edc0a812b2f59838846040518463ffffffff1660e01b81526004016106b793929190610b06565b600060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590610a9b565b60405180910390fd5b6000600154146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90610a7b565b60405180910390fd5b8060018190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60008135905061082081610c78565b92915050565b60008135905061083581610c8f565b92915050565b60008060006060848603121561085057600080fd5b600061085e86828701610811565b935050602061086f86828701610826565b925050604061088086828701610826565b9150509250925092565b600080600080608085870312156108a057600080fd5b60006108ae87828801610811565b94505060206108bf87828801610826565b93505060406108d087828801610826565b92505060606108e187828801610826565b91505092959194509250565b6000602082840312156108ff57600080fd5b600061090d84828501610826565b91505092915050565b600061092283836109f0565b60208301905092915050565b61093781610b8e565b82525050565b600061094882610b54565b6109528185610b6c565b935061095d83610b44565b8060005b8381101561098e5781516109758882610916565b975061098083610b5f565b925050600181019050610961565b5085935050505092915050565b6109a481610bdc565b82525050565b60006109b7602483610b7d565b91506109c282610c00565b604082019050919050565b60006109da601483610b7d565b91506109e582610c4f565b602082019050919050565b6109f981610bd2565b82525050565b610a0881610bd2565b82525050565b6000602082019050610a23600083018461092e565b92915050565b6000606082019050610a3e600083018661092e565b610a4b602083018561092e565b610a5860408301846109ff565b949350505050565b6000602082019050610a75600083018461099b565b92915050565b60006020820190508181036000830152610a94816109aa565b9050919050565b60006020820190508181036000830152610ab4816109cd565b9050919050565b6000602082019050610ad060008301846109ff565b92915050565b6000604082019050610aeb60008301856109ff565b8181036020830152610afd818461093d565b90509392505050565b6000606082019050610b1b60008301866109ff565b610b2860208301856109ff565b8181036040830152610b3a818461093d565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610b9982610bb2565b9050919050565b6000610bab82610b8e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610be782610bee565b9050919050565b6000610bf982610bb2565b9050919050565b7f476174657761792f656e64706f696e742d676174657761792d616c726561647960008201527f2d73657400000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761792f756e617574686f72697a6564000000000000000000000000600082015250565b610c8181610ba0565b8114610c8c57600080fd5b50565b610c9881610bd2565b8114610ca357600080fd5b5056fea26469706673582212201c98759c7342c581a667b5a9b963ca1cc5056871016c7d5ae79615d78cf9ad8164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806339e730ab1461006757806341b3a0a11461008557806346dd48d8146100a35780638d0196d7146100bf578063aa5afdc4146100db578063c5cf2d5e146100f7575b600080fd5b61006f610115565b60405161007c9190610a60565b60405180910390f35b61008d61013b565b60405161009a9190610abb565b60405180910390f35b6100bd60048036038101906100b8919061083b565b610141565b005b6100d960048036038101906100d4919061088a565b61042f565b005b6100f560048036038101906100f091906108ed565b6106f0565b005b6100ff6107cd565b60405161010c9190610a0e565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6000600567ffffffffffffffff811115610184577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101b25781602001602082028036833780820191505090505b5090506001816000815181106101f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610206336107f1565b81600181518110610240577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610255846107f1565b8160028151811061028f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505082816003815181106102d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050818160048151811061031d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600154836040518363ffffffff1660e01b8152600401610388929190610ad6565b600060405180830381600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016103f793929190610a29565b600060405180830381600087803b15801561041157600080fd5b505af1158015610425573d6000803e3d6000fd5b5050505050505050565b6000600467ffffffffffffffff811115610472577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104a05781602001602082028036833780820191505090505b5090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016104e093929190610a29565b600060405180830381600087803b1580156104fa57600080fd5b505af115801561050e573d6000803e3d6000fd5b50505050818160008151811061054d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050610562856107f1565b8160018151811061059c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505083816002815181106105e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050828160038151811061062a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c56001547f02d7d9dafffc43b7e5c89c5702e7775c5de077ae4bec73d6edc0a812b2f59838846040518463ffffffff1660e01b81526004016106b793929190610b06565b600060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590610a9b565b60405180910390fd5b6000600154146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90610a7b565b60405180910390fd5b8060018190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60008135905061082081610c78565b92915050565b60008135905061083581610c8f565b92915050565b60008060006060848603121561085057600080fd5b600061085e86828701610811565b935050602061086f86828701610826565b925050604061088086828701610826565b9150509250925092565b600080600080608085870312156108a057600080fd5b60006108ae87828801610811565b94505060206108bf87828801610826565b93505060406108d087828801610826565b92505060606108e187828801610826565b91505092959194509250565b6000602082840312156108ff57600080fd5b600061090d84828501610826565b91505092915050565b600061092283836109f0565b60208301905092915050565b61093781610b8e565b82525050565b600061094882610b54565b6109528185610b6c565b935061095d83610b44565b8060005b8381101561098e5781516109758882610916565b975061098083610b5f565b925050600181019050610961565b5085935050505092915050565b6109a481610bdc565b82525050565b60006109b7602483610b7d565b91506109c282610c00565b604082019050919050565b60006109da601483610b7d565b91506109e582610c4f565b602082019050919050565b6109f981610bd2565b82525050565b610a0881610bd2565b82525050565b6000602082019050610a23600083018461092e565b92915050565b6000606082019050610a3e600083018661092e565b610a4b602083018561092e565b610a5860408301846109ff565b949350505050565b6000602082019050610a75600083018461099b565b92915050565b60006020820190508181036000830152610a94816109aa565b9050919050565b60006020820190508181036000830152610ab4816109cd565b9050919050565b6000602082019050610ad060008301846109ff565b92915050565b6000604082019050610aeb60008301856109ff565b8181036020830152610afd818461093d565b90509392505050565b6000606082019050610b1b60008301866109ff565b610b2860208301856109ff565b8181036040830152610b3a818461093d565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610b9982610bb2565b9050919050565b6000610bab82610b8e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610be782610bee565b9050919050565b6000610bf982610bb2565b9050919050565b7f476174657761792f656e64706f696e742d676174657761792d616c726561647960008201527f2d73657400000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761792f756e617574686f72697a6564000000000000000000000000600082015250565b610c8181610ba0565b8114610c8c57600080fd5b50565b610c9881610bd2565b8114610ca357600080fd5b5056fea26469706673582212201c98759c7342c581a667b5a9b963ca1cc5056871016c7d5ae79615d78cf9ad8164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1955,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "initialEndpointGatewaySetter",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1957,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "endpointGateway",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1960,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "starknetCore",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStarknetCore)2218"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IStarknetCore)2218": {
        "encoding": "inplace",
        "label": "contract IStarknetCore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}