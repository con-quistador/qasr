{
  "address": "0x522Da797aee204297384FB184013a2Ec02232781",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_starknetCore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "endpointGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialEndpointGatewaySetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpointGateway",
          "type": "address"
        }
      ],
      "name": "setEndpointGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starknetCore",
      "outputs": [
        {
          "internalType": "contract IStarknetCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "warpFromStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "warpToStarknet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0323ed9a474f62b61067479906996adb67c835894bb4760b85f65281d7f61776",
  "receipt": {
    "to": null,
    "from": "0x574E032f50e806e490Cf3D1194912B9Cc3f5D37D",
    "contractAddress": "0x522Da797aee204297384FB184013a2Ec02232781",
    "transactionIndex": 4,
    "gasUsed": "1051115",
    "logsBloom": "0x
    "blockHash": "0x3eb3cad2eb89da3899fc556179ecfea88a31f4c5826ae77a6db4a05e4fdf9150",
    "transactionHash": "0x0323ed9a474f62b61067479906996adb67c835894bb4760b85f65281d7f61776",
    "logs": [],
    "blockNumber": 5716688,
    "cumulativeGasUsed": "1940221",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5e6229F2D4d977d20A50219E521dE6Dd694d45cc"
  ],
  "solcInputHash": "8828a99da954670770f7364eb3f29e16",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starknetCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"endpointGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialEndpointGatewaySetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpointGateway\",\"type\":\"address\"}],\"name\":\"setEndpointGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starknetCore\",\"outputs\":[{\"internalType\":\"contract IStarknetCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"warpFromStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"warpToStarknet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './IStarknetCore.sol';\\n\\ncontract Gateway {\\n\\n    address public initialEndpointGatewaySetter;\\n    uint256 public endpointGateway;\\n    IStarknetCore public starknetCore;\\n    uint256 constant ENDPOINT_GATEWAY_SELECTOR =\\n        352040181584456735608515580760888541466059565068553383579463728554843487745;\\n\\n// Bootstrap\\n    constructor(\\n        address _starknetCore\\n        ) {\\n            require(_starknetCore != address(0), 'Gateway/invalid-starknet-core-address');\\n\\n        starknetCore = IStarknetCore(_starknetCore);\\n        initialEndpointGatewaySetter = msg.sender;\\n    }\\n\\n    function setEndpointGateway(address _endpointGateway) external {\\n        require(msg.sender == initialEndpointGatewaySetter, 'Gateway/unauthorized');\\n        require(endpointGateway == 0, 'Gateway/endpoint-gateway-already-set');\\n        endpointGateway = addressToUint(_endpointGateway);\\n    }\\n\\n    // Utils\\n    function addressToUint(address value) internal pure returns (uint256 convertedValue) {\\n        convertedValue = uint256(uint160(address(value)));\\n    }\\n\\n    // Bridging to Starknet\\n    function warpToStarknet(IERC721 _tokenContract, uint256[] calldata _tokenIds) external {\\n        uint256[] memory payload = new uint256[](3);\\n        for (uint256 tokenIdx = 0; tokenIdx < _tokenIds.length; ++tokenIdx) {\\n            require(_tokenContract.ownerOf(_tokenIds[tokenIdx]) == msg.sender, 'Gateway/caller-is-not-owner');\\n            _tokenContract.transferFrom(msg.sender, address(this), _tokenIds[tokenIdx]);\\n\\n            payload[0] = addressToUint(msg.sender);\\n            payload[1] = addressToUint(address(_tokenContract));\\n            payload[2] = _tokenIds[tokenIdx];\\n\\n            starknetCore.sendMessageToL2(endpointGateway, ENDPOINT_GATEWAY_SELECTOR, payload);\\n\\n        }\\n    }\\n\\n    // Bridging back from Starknet\\n    function warpFromStarknet(IERC721 _tokenContract, uint256[] calldata _tokenIds) external {\\n        uint256[] memory payload = new uint256[](3);\\n\\n        for (uint256 tokenIdx = 0; tokenIdx < _tokenIds.length; ++tokenIdx) {\\n            require(_tokenContract.ownerOf(_tokenIds[tokenIdx]) == address(this), 'Gateway/gateway-is-not-owner');\\n\\n                    payload[0] = addressToUint(msg.sender);\\n                    payload[1] = addressToUint(address(_tokenContract));\\n                    payload[2] = _tokenIds[tokenIdx];\\n\\n                    starknetCore.consumeMessageFromL2(endpointGateway, payload);\\n\\n            _tokenContract.transferFrom(address(this), msg.sender, _tokenIds[tokenIdx]);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1f2054a440082d4e37a4d950955697b20cab4ffc7e2423565f3e731a016d3718\",\"license\":\"MIT\"},\"contracts/IStarknetCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStarknetCore {\\n    /**\\n      Sends a message to an L2 contract.\\n    */\\n    function sendMessageToL2(\\n        uint256 to_address,\\n        uint256 selector,\\n        uint256[] calldata payload\\n    ) external;\\n\\n    /**\\n      Consumes a message that was sent from an L2 contract.\\n    */\\n    function consumeMessageFromL2(uint256 fromAddress, uint256[] calldata payload) external;\\n}\",\"keccak256\":\"0x9771149098089f8bb3016c73037baba84ff26afdef4f06cd719ee8da677c3b4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013b4380380620013b4833981810160405281019062000037919062000149565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a1906200019c565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200026c565b600081519050620001438162000252565b92915050565b6000602082840312156200015c57600080fd5b60006200016c8482850162000132565b91505092915050565b600062000184602583620001be565b9150620001918262000203565b604082019050919050565b60006020820190508181036000830152620001b78162000175565b9050919050565b600082825260208201905092915050565b6000620001dc82620001e3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f476174657761792f696e76616c69642d737461726b6e65742d636f72652d616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6200025d81620001cf565b81146200026957600080fd5b50565b611138806200027c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063243606661461006757806330a333021461008357806335249e391461009f57806339e730ab146100bb57806341b3a0a1146100d9578063c5cf2d5e146100f7575b600080fd5b610081600480360381019061007c9190610bca565b610115565b005b61009d60048036038101906100989190610bca565b610568565b005b6100b960048036038101906100b49190610b78565b61099a565b005b6100c3610a7f565b6040516100d09190610db2565b60405180910390f35b6100e1610aa5565b6040516100ee9190610e4d565b60405180910390f35b6100ff610aab565b60405161010c9190610d60565b60405180910390f35b6000600367ffffffffffffffff811115610158577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101865781602001602082028036833780820191505090505b50905060005b83839050811015610561573373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e868685818110610203577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016102269190610e4d565b60206040518083038186803b15801561023e57600080fd5b505afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610ba1565b73ffffffffffffffffffffffffffffffffffffffff16146102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390610e2d565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330878786818110610323577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161034893929190610d7b565b600060405180830381600087803b15801561036257600080fd5b505af1158015610376573d6000803e3d6000fd5b5050505061038333610acf565b826000815181106103bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506103d285610acf565b8260018151811061040c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050838382818110610451577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582600281518110610492577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c56001547ec73f681176fc7b3f9693986fd7b14581e8d540519e27400e88b8713932be01856040518463ffffffff1660e01b815260040161051e93929190610e98565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b505050508061055a90610f92565b905061018c565b5050505050565b6000600367ffffffffffffffff8111156105ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105d95781602001602082028036833780820191505090505b50905060005b83839050811015610993573073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e868685818110610656577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016106799190610e4d565b60206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190610ba1565b73ffffffffffffffffffffffffffffffffffffffff161461071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071690610ded565b60405180910390fd5b61072833610acf565b82600081518110610762577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061077785610acf565b826001815181106107b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508383828181106107f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582600281518110610837577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600154846040518363ffffffff1660e01b81526004016108a2929190610e68565b600060405180830381600087803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166323b872dd303387878681811061092b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161095093929190610d7b565b600060405180830381600087803b15801561096a57600080fd5b505af115801561097e573d6000803e3d6000fd5b505050508061098c90610f92565b90506105df565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f90610e0d565b60405180910390fd5b600060015414610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6490610dcd565b60405180910390fd5b610a7681610acf565b60018190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b600081359050610afe816110d4565b92915050565b600081519050610b13816110d4565b92915050565b60008083601f840112610b2b57600080fd5b8235905067ffffffffffffffff811115610b4457600080fd5b602083019150836020820283011115610b5c57600080fd5b9250929050565b600081359050610b72816110eb565b92915050565b600060208284031215610b8a57600080fd5b6000610b9884828501610aef565b91505092915050565b600060208284031215610bb357600080fd5b6000610bc184828501610b04565b91505092915050565b600080600060408486031215610bdf57600080fd5b6000610bed86828701610b63565b935050602084013567ffffffffffffffff811115610c0a57600080fd5b610c1686828701610b19565b92509250509250925092565b6000610c2e8383610d42565b60208301905092915050565b610c4381610f20565b82525050565b6000610c5482610ee6565b610c5e8185610efe565b9350610c6983610ed6565b8060005b83811015610c9a578151610c818882610c22565b9750610c8c83610ef1565b925050600181019050610c6d565b5085935050505092915050565b610cb081610f6e565b82525050565b6000610cc3602483610f0f565b9150610cce8261100a565b604082019050919050565b6000610ce6601c83610f0f565b9150610cf182611059565b602082019050919050565b6000610d09601483610f0f565b9150610d1482611082565b602082019050919050565b6000610d2c601b83610f0f565b9150610d37826110ab565b602082019050919050565b610d4b81610f64565b82525050565b610d5a81610f64565b82525050565b6000602082019050610d756000830184610c3a565b92915050565b6000606082019050610d906000830186610c3a565b610d9d6020830185610c3a565b610daa6040830184610d51565b949350505050565b6000602082019050610dc76000830184610ca7565b92915050565b60006020820190508181036000830152610de681610cb6565b9050919050565b60006020820190508181036000830152610e0681610cd9565b9050919050565b60006020820190508181036000830152610e2681610cfc565b9050919050565b60006020820190508181036000830152610e4681610d1f565b9050919050565b6000602082019050610e626000830184610d51565b92915050565b6000604082019050610e7d6000830185610d51565b8181036020830152610e8f8184610c49565b90509392505050565b6000606082019050610ead6000830186610d51565b610eba6020830185610d51565b8181036040830152610ecc8184610c49565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f2b82610f44565b9050919050565b6000610f3d82610f20565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f7982610f80565b9050919050565b6000610f8b82610f44565b9050919050565b6000610f9d82610f64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fd057610fcf610fdb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f476174657761792f656e64706f696e742d676174657761792d616c726561647960008201527f2d73657400000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761792f676174657761792d69732d6e6f742d6f776e657200000000600082015250565b7f476174657761792f756e617574686f72697a6564000000000000000000000000600082015250565b7f476174657761792f63616c6c65722d69732d6e6f742d6f776e65720000000000600082015250565b6110dd81610f20565b81146110e857600080fd5b50565b6110f481610f32565b81146110ff57600080fd5b5056fea264697066735822122067e260ad0187084478d2a6d1ff2a545ae8efcc35194b8cb2c03b04decb8f485664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063243606661461006757806330a333021461008357806335249e391461009f57806339e730ab146100bb57806341b3a0a1146100d9578063c5cf2d5e146100f7575b600080fd5b610081600480360381019061007c9190610bca565b610115565b005b61009d60048036038101906100989190610bca565b610568565b005b6100b960048036038101906100b49190610b78565b61099a565b005b6100c3610a7f565b6040516100d09190610db2565b60405180910390f35b6100e1610aa5565b6040516100ee9190610e4d565b60405180910390f35b6100ff610aab565b60405161010c9190610d60565b60405180910390f35b6000600367ffffffffffffffff811115610158577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101865781602001602082028036833780820191505090505b50905060005b83839050811015610561573373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e868685818110610203577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016102269190610e4d565b60206040518083038186803b15801561023e57600080fd5b505afa158015610252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102769190610ba1565b73ffffffffffffffffffffffffffffffffffffffff16146102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390610e2d565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330878786818110610323577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161034893929190610d7b565b600060405180830381600087803b15801561036257600080fd5b505af1158015610376573d6000803e3d6000fd5b5050505061038333610acf565b826000815181106103bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506103d285610acf565b8260018151811061040c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050838382818110610451577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582600281518110610492577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e3aa6c56001547ec73f681176fc7b3f9693986fd7b14581e8d540519e27400e88b8713932be01856040518463ffffffff1660e01b815260040161051e93929190610e98565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b505050508061055a90610f92565b905061018c565b5050505050565b6000600367ffffffffffffffff8111156105ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105d95781602001602082028036833780820191505090505b50905060005b83839050811015610993573073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e868685818110610656577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016106799190610e4d565b60206040518083038186803b15801561069157600080fd5b505afa1580156106a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190610ba1565b73ffffffffffffffffffffffffffffffffffffffff161461071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071690610ded565b60405180910390fd5b61072833610acf565b82600081518110610762577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061077785610acf565b826001815181106107b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508383828181106107f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582600281518110610837577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c9dd5c0600154846040518363ffffffff1660e01b81526004016108a2929190610e68565b600060405180830381600087803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166323b872dd303387878681811061092b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161095093929190610d7b565b600060405180830381600087803b15801561096a57600080fd5b505af115801561097e573d6000803e3d6000fd5b505050508061098c90610f92565b90506105df565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f90610e0d565b60405180910390fd5b600060015414610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6490610dcd565b60405180910390fd5b610a7681610acf565b60018190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b600081359050610afe816110d4565b92915050565b600081519050610b13816110d4565b92915050565b60008083601f840112610b2b57600080fd5b8235905067ffffffffffffffff811115610b4457600080fd5b602083019150836020820283011115610b5c57600080fd5b9250929050565b600081359050610b72816110eb565b92915050565b600060208284031215610b8a57600080fd5b6000610b9884828501610aef565b91505092915050565b600060208284031215610bb357600080fd5b6000610bc184828501610b04565b91505092915050565b600080600060408486031215610bdf57600080fd5b6000610bed86828701610b63565b935050602084013567ffffffffffffffff811115610c0a57600080fd5b610c1686828701610b19565b92509250509250925092565b6000610c2e8383610d42565b60208301905092915050565b610c4381610f20565b82525050565b6000610c5482610ee6565b610c5e8185610efe565b9350610c6983610ed6565b8060005b83811015610c9a578151610c818882610c22565b9750610c8c83610ef1565b925050600181019050610c6d565b5085935050505092915050565b610cb081610f6e565b82525050565b6000610cc3602483610f0f565b9150610cce8261100a565b604082019050919050565b6000610ce6601c83610f0f565b9150610cf182611059565b602082019050919050565b6000610d09601483610f0f565b9150610d1482611082565b602082019050919050565b6000610d2c601b83610f0f565b9150610d37826110ab565b602082019050919050565b610d4b81610f64565b82525050565b610d5a81610f64565b82525050565b6000602082019050610d756000830184610c3a565b92915050565b6000606082019050610d906000830186610c3a565b610d9d6020830185610c3a565b610daa6040830184610d51565b949350505050565b6000602082019050610dc76000830184610ca7565b92915050565b60006020820190508181036000830152610de681610cb6565b9050919050565b60006020820190508181036000830152610e0681610cd9565b9050919050565b60006020820190508181036000830152610e2681610cfc565b9050919050565b60006020820190508181036000830152610e4681610d1f565b9050919050565b6000602082019050610e626000830184610d51565b92915050565b6000604082019050610e7d6000830185610d51565b8181036020830152610e8f8184610c49565b90509392505050565b6000606082019050610ead6000830186610d51565b610eba6020830185610d51565b8181036040830152610ecc8184610c49565b9050949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f2b82610f44565b9050919050565b6000610f3d82610f20565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f7982610f80565b9050919050565b6000610f8b82610f44565b9050919050565b6000610f9d82610f64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fd057610fcf610fdb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f476174657761792f656e64706f696e742d676174657761792d616c726561647960008201527f2d73657400000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761792f676174657761792d69732d6e6f742d6f776e657200000000600082015250565b7f476174657761792f756e617574686f72697a6564000000000000000000000000600082015250565b7f476174657761792f63616c6c65722d69732d6e6f742d6f776e65720000000000600082015250565b6110dd81610f20565b81146110e857600080fd5b50565b6110f481610f32565b81146110ff57600080fd5b5056fea264697066735822122067e260ad0187084478d2a6d1ff2a545ae8efcc35194b8cb2c03b04decb8f485664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1955,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "initialEndpointGatewaySetter",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1957,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "endpointGateway",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1960,
        "contract": "contracts/Gateway.sol:Gateway",
        "label": "starknetCore",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStarknetCore)2257"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IStarknetCore)2257": {
        "encoding": "inplace",
        "label": "contract IStarknetCore",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}